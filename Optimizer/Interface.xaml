<Window x:Class="Optimizer.Interface"	
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:sys="clr-namespace:System.Windows.Controls;assembly=PresentationFramework"
		xmlns:local="clr-namespace:Optimizer"
		mc:Ignorable="d"
        
        Title="Optimizer vDev"
		WindowStyle="None"
        ResizeMode="NoResize"
        AllowsTransparency="True"
        Background="Transparent"
        Foreground="White"
        d:HorizontalAlignment="Center"
        d:VerticalAlignment="Center"
        Width="400"
        Height="680">
    <!-- 390 ou 650 -->


    <Window.Resources>
        <!-- CONVERTISSEUR -->
        <local:StringNotEmptyConverter x:Key="StringNotEmptyConverter"/>

        <!-- STYLE : BARRE DE TITRE -->
        <Style x:Key="WindowButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <!-- STYLE : BOUTONS MASQUER ET REDUIRE -->
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border" 
                                Background="{TemplateBinding Background}"
                                VerticalAlignment="Center">
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Height="30"
                                              Width="30"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#20FFFFFF"/>
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#4BC64B"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- STYLE : BOUTON FERMER -->
        <Style x:Key="CloseButtonStyle" TargetType="Button" BasedOn="{StaticResource WindowButtonStyle}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border" 
                                Background="{TemplateBinding Background}"
                                Height="30"
                                Width="30"
                                CornerRadius="0,10,0,0"
                                VerticalAlignment="Center">
                            <ContentPresenter HorizontalAlignment="Center"
                              VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#20FFFFFF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#4BC64B"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- STYLE : TOGGLE BUTTON MOBILE -->
        <Style x:Key="SwitchToggleButton" TargetType="ToggleButton">
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid>
                            <!-- Fond du switch -->
                            <Border x:Name="SwitchBackground" 
                                    Height="16"
							        Width="25" 
                                    CornerRadius="3"/>
                            <!-- Interrupteur -->
                            <Border x:Name="SwitchThumb"
							        Height="10"
                                    Width="10" 
                                    CornerRadius="1.5" 
                                    Background="White" 
                                    HorizontalAlignment="Left" 
                                    Margin="3"/>
                        </Grid>
                        <!-- Déclencheurs pour changer l'apparence -->
                        <ControlTemplate.Triggers>
                            <!-- Quand le ToggleButton est coché (actif) -->
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="SwitchBackground" Property="Background" Value="#3AAD3A"/>
                                <Setter TargetName="SwitchThumb" Property="HorizontalAlignment" Value="Right"/>
                            </Trigger>
                            <!-- Quand le ToggleButton est décoché (inactif) -->
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="SwitchBackground" Property="Background" Value="#909090"/>
                                <Setter TargetName="SwitchThumb" Property="HorizontalAlignment" Value="Left"/>
                            </Trigger>
                            <!-- Quand le ToggleButton est désactivé -->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="SwitchBackground" Property="Background" Value="#AAAAAA"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- STYLE : BOUTONS DE CONTROLE -->
        <Style x:Key="Button_Control" TargetType="Button">
            <Setter Property="Background" Value="#3AAD3A"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="192.5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="7" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Survol (MouseOver) -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#4BC64B"/>
                </Trigger>
                <!-- Cliqué (Pressed) -->
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#369936"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- STYLE : BOUTON SETTINGS -->
        <Style x:Key="Button_Settings" TargetType="ToggleButton">
            <Setter Property="Background" Value="#FF404040"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Margin" Value="5,5,5,5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="{TemplateBinding Background}" CornerRadius="7" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Survol (MouseOver) -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#303030"/>
                </Trigger>
                <!-- Checké (Pressed) -->
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#404040"/>
                </Trigger>
                <!-- Checké (Checked) -->
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ToggleButton">
                                <Border Background="{TemplateBinding Background}" CornerRadius="7,7,0,0" BorderThickness="0">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Content">
                        <Setter.Value>
                            <Image Source="/Optimizer;component/Assets/Sources/up.png" Stretch="Uniform" Height="7"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <!-- Bouton activé ET survolé -->
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="True"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#303030"/>
                </MultiTrigger>
                <!-- Bouton cliqué, activé ET survolé -->
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsPressed" Value="True"/>
                        <Condition Property="IsChecked" Value="True"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#404040"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <!-- STYLE : EN-TÊTE DE LA DATAGRID -->
        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Margin" Value="0,0,0,5"/>
            <Setter Property="FontSize" Value="8"/>
            <Setter Property="FontFamily" Value="Bahnschrift Light"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>

        <!-- STYLE : LIGNES DE LA DATAGRID -->
        <Style TargetType="DataGridRow">
            <Setter Property="Height" Value="32"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="DataGridRow">
                        <Border Margin="0,0,0,2" Background="#353535" CornerRadius="7" Width="390">
                            <DataGridCellsPresenter Margin="0,0,0,0"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Désactiver la surbrillance visuelle pour les lignes sélectionnées -->
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- STYLE : CELLULES DE LA DATAGRID -->
        <Style TargetType="DataGridCell">
            <Setter Property="Padding" Value="5"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Style.Triggers>
                <!-- Apparence quand la cellule est sélectionnée -->
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                </Trigger>
                <!-- Apparence quand la DataGrid n'a pas le focus -->
                <DataTrigger Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType=DataGrid}}" Value="False">
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Background" Value="Transparent"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- STYLE : BOUTONS DE DEPLACEMENT DES LIGNES -->
        <Style x:Key="ButtonUpDown_Small" TargetType="Button">
            <Setter Property="Background" Value="#FF505050"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="10"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Width" Value="20"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Survol (MouseOver) -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#4BC64B"/>
                </Trigger>
                <!-- Cliqué (Pressed) -->
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#369936"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- STYLE : LABELS DES PARAMETRES -->
        <Style x:Key="LabelSettings" TargetType="TextBlock">
            <Setter Property="Height" Value="12"/>
            <Setter Property="Width" Value="155"/>
            <Setter Property="Margin" Value="7.5,0,5,0"/>
            <Setter Property="FontFamily" Value="Bahnschrift Semibold"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>

        <!-- STYLE : SOUS-LABELS DES PARAMETRES -->
        <Style x:Key="SubLabelSettings" TargetType="TextBlock">
            <Setter Property="Height" Value="10"/>
            <Setter Property="Width" Value="155"/>
            <Setter Property="Margin" Value="42.5,0,5,0"/>
            <Setter Property="FontFamily" Value="Bahnschrift Light"/>
            <Setter Property="FontSize" Value="9"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>

        <!-- STYLE : BOUTONS DE RACCOURCIS -->
        <Style x:Key="Button_Shortcuts" TargetType="Button">
            <Setter Property="Height" Value="20"/>
            <Setter Property="Width" Value="182.5"/>
            <Setter Property="Margin" Value="5,0,7.5,0"/>
            <Setter Property="Background" Value="#FF353535"/>
            <Setter Property="Foreground" Value="#FF909090"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold "/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="0" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Survol (MouseOver) -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FF303030"/>
                </Trigger>
                <!-- Cliqué (Pressed) -->
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#FF404040"/>
                </Trigger>
                <Trigger Property="Content" Value="Raccourci déjà utilisé !">
                    <Setter Property="Foreground" Value="Red"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#FF404040"/>
                    <Setter Property="Background" Value="#FF303030"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- STYLE : CHECKBOX DE DELAIS -->
        <Style x:Key="RoundedCheckBox" TargetType="CheckBox">
            <Setter Property="Background" Value="#FF909090"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Margin" Value="5,0,5,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Border x:Name="CheckBoxBorder"
                                Background="{TemplateBinding Background}"
                                BorderThickness="0"
                                CornerRadius="3"
                                Width="16" 
                                Height="16">
                            <Border x:Name="CheckMark"
                                    Background="White"
                                    Margin="2.5"
                                    CornerRadius="1.5"
                                    Opacity="0"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- Checked state -->
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckBoxBorder" Property="Background" Value="#3AAD3A"/>
                                <Setter TargetName="CheckMark" Property="Opacity" Value="1"/>
                            </Trigger>

                            <!-- MouseOver state -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="CheckBoxBorder" Property="Background" Value="#4BC64B"/>
                                <Setter TargetName="CheckMark" Property="Background" Value="#F0F0F0"/>
                            </Trigger>

                            <!-- Pressed state -->
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="CheckBoxBorder" Property="Background" Value="#369936"/>
                                <Setter TargetName="CheckMark" Property="Background" Value="#E0E0E0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- STYLE : TEXTBOX DE DELAIS -->
        <Style x:Key="TextBoxDelays" TargetType="TextBox">
            <Setter Property="Height" Value="20"/>
            <Setter Property="Width" Value="64.5"/>
            <Setter Property="BorderThickness" Value="0,0,0,2"/>
            <Setter Property="BorderBrush" Value="#FF909090"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="#FF909090"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>

            <!-- Définition du ControlTemplate personnalisé -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border 
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <!-- Gestion des états interactifs -->
            <Style.Triggers>
                <!-- Au survol de la souris -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="#4BC64B"/>
                    <Setter Property="BorderBrush" Value="#4BC64B"/>
                </Trigger>

                <!-- Quand la TextBox est focusée -->
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter Property="FontFamily" Value="Bahnschrift Light"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="BorderBrush" Value="White"/>
                </Trigger>

                <!-- Quand la TextBox est désactivée -->
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#FF404040"/>
                    <Setter Property="BorderBrush" Value="#FF404040"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- STYLE : TEXTE DE SEPARATION DES DELAIS (à) -->
        <Style x:Key="TxtBloc_Separator" TargetType="TextBlock">
            <Setter Property="Width" Value="10"/>
            <Setter Property="Margin" Value="7.5,0,5,0"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontFamily" Value="Bahnschrift Light"/>
            <Setter Property="FontSize" Value="9"/>

            <Style.Triggers>
                <!-- Quand le TextBloc est désactivé -->
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#FF404040"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- STYLE : FLECHE DE COMBOBOX -->
        <Style x:Key="FlatComboBoxToggleButton" TargetType="ToggleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="Transparent" Width="20">
                            <Path Data="M0,0 L4,4 8,0" 
                                  Fill="white"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- STYLE : ITEM DE LISTE DE COMBOBOX -->
        <Style x:Key="FlatComboBoxItemStyle" TargetType="ComboBoxItem">
            <Setter Property="Height" Value="20"/>
            <Setter Property="Background" Value="#404040"/>
            <Setter Property="Foreground" Value="#FF909090"/>
            <Setter Property="FontFamily" Value="Bahnschrift Light"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <Grid Background="{TemplateBinding Background}" 
                              Height="{TemplateBinding Height}"
                              VerticalAlignment="Stretch">
                            <ContentPresenter x:Name="content"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Margin="5,0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter Property="Background" Value="#369936"/>
                                <Setter TargetName="content" Property="TextBlock.Foreground" Value="White"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- STYLE : COMBOBOX -->
        <Style x:Key="FlatComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Height" Value="20"/>
            <Setter Property="Width" Value="182.5"/>
            <Setter Property="Margin" Value="5,0,7.5,0"/>
            <Setter Property="Background" Value="#FF353535"/>
            <Setter Property="Foreground" Value="#FF909090"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="SelectedIndex" Value="0"/>
            <Setter Property="ItemContainerStyle" Value="{StaticResource FlatComboBoxItemStyle}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>

                            <Border Background="{TemplateBinding Background}"
                                    Grid.ColumnSpan="2"/>

                            <ContentPresenter x:Name="contentPresenter"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              Margin="22,0,0,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>

                            <TextBlock Grid.Column="0"
                                       Text="{Binding SelectedItem.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Margin="22,0,0,0"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"/>

                            <ToggleButton x:Name="toggleButton"
                                          Grid.Column="1"
                                          Style="{StaticResource FlatComboBoxToggleButton}"
                                          Focusable="False"
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>

                            <Popup x:Name="PART_Popup"
                                   IsOpen="{Binding IsChecked, ElementName=toggleButton}"
                                   Placement="Bottom"
                                   Width="{TemplateBinding ActualWidth}"
                                   StaysOpen="False">
                                <Border Background="#FF353535" MaxHeight="200">
                                    <ScrollViewer CanContentScroll="True">
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>




    <!-- FENÊTRE -->
    <Border MouseDown="ClearFocus_MouseDown" Background="#FF252525" CornerRadius="10" BorderThickness="0">

        <!-- INTERFACE GENERALE -->
        <Grid Width="400" Height="680" Background="#00FFFFFF">
            <StackPanel Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="400" Height="680" Orientation="Vertical">

                <!-- BARRE DE TITRE -->
                <Grid x:Name="TitleBar" Height="30" Background="Transparent" MouseDown="StackPanel_MouseDown">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <!-- Colonne gauche : Logo + Titre -->
                        <ColumnDefinition Width="*"/>
                        <!-- Espace vide intermédiaire -->
                        <ColumnDefinition Width="Auto"/>
                        <!-- Colonne droite : Boutons -->
                    </Grid.ColumnDefinitions>

                    <!-- Partie Gauche : Logo + Titre -->
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <Image Source="/Optimizer;component/Assets/Sources/optimizer_logo.png" Height="20" Width="20" Margin="5,0,0,0"/>
                        <TextBlock Text="Optimizer" VerticalAlignment="Center" Margin="5,0,0,0" FontFamily="Bahnschrift Light" Foreground="White"/>
                    </StackPanel>

                    <!-- Partie Droite : Boutons d'interface -->
                    <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                        <!-- BOUTON MASQUER -->
                        <Button x:Name="Btn_Hide" Style="{StaticResource WindowButtonStyle}">
                            <Image Source="/Optimizer;component/Assets/Sources/hide.png" Height="10" Stretch="Uniform"/>
                        </Button>

                        <!-- BOUTON REDUIRE -->
                        <Button x:Name="Btn_Minimize" Style="{StaticResource WindowButtonStyle}" Click="MinimizeButton_Click">
                            <Image Source="/Optimizer;component/Assets/Sources/minimise.png" Height="10" Stretch="Uniform"/>
                        </Button>

                        <!-- BOUTON FERMER -->
                        <Button x:Name="Btn_Close" Style="{StaticResource CloseButtonStyle}" Click="CloseButton_Click">
                            <Image Source="/Optimizer;component/Assets/Sources/close.png" Height="10" Stretch="Uniform"/>
                        </Button>
                    </StackPanel>
                </Grid>

                <!-- LISTE DES PERSONNAGES -->
                <DataGrid x:Name="TargetWindowsGrid"
						  ItemsSource="{Binding Personnages}"
						  HeadersVisibility="Column"
						  AutoGenerateColumns="False"
						  CanUserAddRows="False"
						  SelectionMode="Extended"
						  SelectionUnit="Cell"
						  IsReadOnly="True"
						  Height="281"
						  Width="390"
						  Margin="5,5,5,3"
						  Background="#00FFFFFF"
						  BorderThickness="0"
						  CanUserResizeColumns="False"
						  CanUserReorderColumns="False"
						  CanUserSortColumns="False"
						  GridLinesVisibility="None">

                    <DataGrid.Columns>
                        <!-- COLONNE ORDRE -->
                        <DataGridTextColumn Header="#" Binding="{Binding Order}" Width="30"/>
                        <!-- COLONNE HANDLE -->
                        <DataGridTextColumn Header="HANDLE" Binding="{Binding Handle}" Width="100" Visibility="Hidden"/>
                        <!-- COLONNE MONTER -->
                        <DataGridTemplateColumn Header="∧" Width="30">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button x:Name="Btn_UpSmall" Style="{StaticResource ButtonUpDown_Small}" Command="{Binding DataContext.MoveUpCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" Click="MoveUp_Click">
                                        <Button.Content>
                                            <Image Source="/Optimizer;component/Assets/Sources/up.png" Height="7"  Stretch="Uniform"/>
                                        </Button.Content>
                                        <!-- N'affiche le bouton que si la ligne est remplie -->
                                        <Button.Visibility>
                                            <Binding Path="CharacterName" Converter="{StaticResource StringNotEmptyConverter}"/>
                                        </Button.Visibility>
                                    </Button>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- COLONNE DESCENDRE -->
                        <DataGridTemplateColumn Header="∨" Width="30">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button x:Name="Btn_DownSmall" Style="{StaticResource ButtonUpDown_Small}" Command="{Binding DataContext.MoveDownCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}" Click="MoveDown_Click">
                                        <Button.Content>
                                            <Image Source="/Optimizer;component/Assets/Sources/down.png" Height="7" Stretch="Uniform"/>
                                        </Button.Content>
                                        <!-- N'affiche le bouton que si la ligne est remplie -->
                                        <Button.Visibility>
                                            <Binding Path="CharacterName" Converter="{StaticResource StringNotEmptyConverter}"/>
                                        </Button.Visibility>
                                    </Button>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <!-- COLONNE NOM DE LA FENETRE -->
                        <DataGridTextColumn Header="FENÊTRE" Binding="{Binding WindowName}" Width="200" Visibility="Hidden"/>
                        <!-- COLONNE PERSONNAGE -->
                        <DataGridTextColumn Header="PERSONNAGE" Binding="{Binding CharacterName}" Width="120" FontFamily="Myriad Pro SemiBold" FontSize="12"/>
                        <!-- COLONNE MOUSE CLONE -->
                        <DataGridTemplateColumn Header="MC" Width="45">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ToggleButton x:Name="TglBtn_MC_WindowStatus" IsChecked="{Binding MouseClone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SwitchToggleButton}" Content=""/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- COLONNE HOTKEY CLONE -->
                        <DataGridTemplateColumn Header="HC" Width="45">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ToggleButton x:Name="TglBtn_HC_WindowStatus" IsChecked="{Binding HotkeyClone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SwitchToggleButton}" Content=""/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- COLONNE WINDOW SWITCHER -->
                        <DataGridTemplateColumn Header="WS" Width="45">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ToggleButton x:Name="TglBtn_WS_WindowStatus" IsChecked="{Binding WindowSwitcher, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SwitchToggleButton}" Content=""/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- COLONNE EASY TEAM -->
                        <DataGridTemplateColumn Header="ET" Width="45">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ToggleButton x:Name="TglBtn_ET_WindowStatus" IsChecked="{Binding EasyTeam, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource SwitchToggleButton}" Content=""/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>

                <!-- BOUTONS DE CONTROLE -->
                <StackPanel Height="30" Orientation="Horizontal">

                    <!-- BOUTON REFRESH -->
                    <Button x:Name="Btn_Refresh" Style="{StaticResource Button_Control}" Margin="5,0,2.5,0" Click="BtnRefresh_Click">
                        <Button.Content>
                            <Image Source="/Optimizer;component/Assets/Sources/refresh.png" Stretch="Uniform" Height="15"/>
                        </Button.Content>
                    </Button>

                    <!-- BOUTON EASYTEAM -->
                    <Button x:Name="Btn_EasyTeam" Style="{StaticResource Button_Control}" Margin="2.5,0,5,0">
                        <Button.Content>
                            <Image Source="/Optimizer;component/Assets/Sources/easyteam.png" Stretch="Uniform" Height="15"/>
                        </Button.Content>
                    </Button>

                </StackPanel>

                <!-- BOUTON PARAMETRES -->
                <ToggleButton x:Name="Btn_Settings" Style="{StaticResource Button_Settings}" Checked="ToggleButton_Checked" Unchecked="ToggleButton_Unchecked">
                    <ToggleButton.Content>
                        <Image Source="/Optimizer;component/Assets/Sources/settings.png" Stretch="Uniform" Height="15"/>
                    </ToggleButton.Content>
                </ToggleButton>

                <!-- INTERFACE PARAMETRES -->
                <StackPanel Orientation="Vertical" Height="290">

                    <!-- MOUSE CLONE -->
                    <StackPanel Orientation="Horizontal" Height="20" Margin="0,10,0,0">
                        <ToggleButton x:Name="TglBtn_MC_GlobalStatus" Style="{StaticResource SwitchToggleButton}" Content="" Margin="10,0,0,0"/>
                        <TextBlock x:Name="TxtBloc_MC_LabelSettings" Style="{StaticResource LabelSettings}" Text="Mouse Clone"/>
                        <Button x:Name="Btn_MC_Shortcut" Style="{StaticResource Button_Shortcuts}" Content="Bouton du milieu" Click="ShortcutButton_Click"/>
                    </StackPanel>

                    <!-- MOUSE CLONE - DELAIS -->
                    <StackPanel Orientation="Horizontal" Height="20" Margin="0,10,0,0">
                        <TextBlock x:Name="TxtBloc_MC_DelaysLabelSettings" Style="{StaticResource SubLabelSettings}" Text="Délais de déclenchement"/>
                        <CheckBox x:Name="ChkBox_MC_Delays" Style="{StaticResource RoundedCheckBox}" IsChecked="True"/>
                        <TextBox x:Name="TxtBox_MC_MinDelay" Style="{StaticResource TextBoxDelays}" Text="50ms" Margin="5,0,2.5,0" IsEnabled="{Binding IsChecked, ElementName=ChkBox_MC_Delays}" PreviewMouseDown="TextBox_PreviewMouseDown" LostKeyboardFocus="TextBox_LostKeyboardFocus" KeyUp="TextBox_KeyUp" PreviewTextInput="NumberValidation_PreviewTextInput" DataObject.Pasting="NumberValidation_Pasting"/>
                        <TextBlock Style="{StaticResource TxtBloc_Separator}" Text="à" IsEnabled="{Binding IsChecked, ElementName=ChkBox_MC_Delays}"/>
                        <TextBox x:Name="TxtBox_MC_MaxDelay" Style="{StaticResource TextBoxDelays}" Text="125ms" Margin="2.5,0,0,0" IsEnabled="{Binding IsChecked, ElementName=ChkBox_MC_Delays}" PreviewMouseDown="TextBox_PreviewMouseDown" LostKeyboardFocus="TextBox_LostKeyboardFocus" KeyUp="TextBox_KeyUp" PreviewTextInput="NumberValidation_PreviewTextInput" DataObject.Pasting="NumberValidation_Pasting"/>
                    </StackPanel>

                    <!-- MOUSE CLONE - POSITION DU CURSEUR -->
                    <StackPanel Orientation="Horizontal" Height="20" Margin="0,10,0,0">
                        <TextBlock x:Name="TxtBloc_MC_CursorPosLabelSettings" Style="{StaticResource SubLabelSettings}" Text="Position du curseur"/>
                        <ComboBox x:Name="CboBox_MC_CursorPos" Style="{StaticResource FlatComboBoxStyle}">
                            <ComboBoxItem Content="Fixe (0px)"/>
                            <ComboBoxItem Content="Décalée (5px)"/>
                        </ComboBox>
                    </StackPanel>

                    <!-- HOTKEY CLONE -->
                    <StackPanel Orientation="Horizontal" Height="20" Margin="0,20,0,0">
                        <ToggleButton x:Name="TglBtn_HC_GlobalStatus" Style="{StaticResource SwitchToggleButton}" Content="" Margin="10,0,0,0"/>
                        <TextBlock x:Name="TxtBloc_HC_LabelSettings" Style="{StaticResource LabelSettings}" Text="Hotkey Clone"/>
                        <Button x:Name="Btn_HC_Shortcut" Style="{StaticResource Button_Shortcuts}" Content="Ctrl+F1" Click="ShortcutButton_Click"/>
                    </StackPanel>

                    <!-- HOTKEY CLONE - DELAIS -->
                    <StackPanel Orientation="Horizontal" Height="20" Margin="0,10,0,0">
                        <TextBlock x:Name="TxtBloc_HC_DelaysLabelSettings"  Style="{StaticResource SubLabelSettings}" Text="Délais de déclenchement"/>
                        <CheckBox x:Name="ChkBox_HC_Delays" Style="{StaticResource RoundedCheckBox}" IsChecked="True"/>
                        <TextBox x:Name="TxtBox_HC_MinDelay" Style="{StaticResource TextBoxDelays}" Text="50ms" Margin="5,0,2.5,0" IsEnabled="{Binding IsChecked, ElementName=ChkBox_HC_Delays}" PreviewMouseDown="TextBox_PreviewMouseDown" LostKeyboardFocus="TextBox_LostKeyboardFocus" KeyUp="TextBox_KeyUp" PreviewTextInput="NumberValidation_PreviewTextInput" DataObject.Pasting="NumberValidation_Pasting"/>
                        <TextBlock Style="{StaticResource TxtBloc_Separator}" Text="à" IsEnabled="{Binding IsChecked, ElementName=ChkBox_HC_Delays}"/>
                        <TextBox x:Name="TxtBox_HC_MaxDelay" Style="{StaticResource TextBoxDelays}" Text="125ms" Margin="2.5,0,0,0" IsEnabled="{Binding IsChecked, ElementName=ChkBox_HC_Delays}" PreviewMouseDown="TextBox_PreviewMouseDown" LostKeyboardFocus="TextBox_LostKeyboardFocus" KeyUp="TextBox_KeyUp" PreviewTextInput="NumberValidation_PreviewTextInput" DataObject.Pasting="NumberValidation_Pasting"/>
                    </StackPanel>

                    <!-- WINDOW SWITCHER -->
                    <StackPanel Orientation="Horizontal" Height="20" Margin="0,20,0,0">
                        <ToggleButton x:Name="TglBtn_WS_GlobalStatus" Style="{StaticResource SwitchToggleButton}" Content="" Margin="10,0,0,0"/>
                        <TextBlock x:Name="TxtBloc_WS_LabelSettings" Style="{StaticResource LabelSettings}" Text="Window Switcher"/>
                        <Button x:Name="Btn_WS_Shortcut" Style="{StaticResource Button_Shortcuts}" Content="F1" Click="ShortcutButton_Click"/>
                    </StackPanel>

                    <!-- EASY TEAM -->
                    <StackPanel Orientation="Horizontal" Height="20" Margin="0,20,0,0">
                        <ToggleButton x:Name="TglBtn_ET_GlobalStatus" Style="{StaticResource SwitchToggleButton}" Content="" Margin="10,0,0,0"/>
                        <TextBlock x:Name="TxtBloc_ET_LabelSettings" Style="{StaticResource LabelSettings}" Text="Easy Team"/>
                        <ComboBox x:Name="CboBox_ET_Leader" Style="{StaticResource FlatComboBoxStyle}" ItemsSource="{Binding LeaderOptions}" DisplayMemberPath="DisplayName" SelectedValuePath="Value" SelectedValue="{Binding SelectedLeader}"/>
                    </StackPanel>
                    
                    <!-- EASY TEAM - POSITION DU TCHAT -->
                    <StackPanel Orientation="Horizontal" Height="20" Margin="0,10,0,0">
                        <TextBlock x:Name="TxtBloc_ET_TchatPosLabelSettings"  Style="{StaticResource SubLabelSettings}" Text="Position du tchat"/>
                        <Button x:Name="Btn_ET_TchatPos" Style="{StaticResource Button_Shortcuts}" Content="Définir la position du tchat" IsEnabled="False"/>
                    </StackPanel>

                </StackPanel>
            </StackPanel>
        </Grid>
    </Border>
</Window>